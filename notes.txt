----------------------------------------------------------------------------------------------------------------------------------------
Type irb in the terminal to run commands immediately similar to running python
without any commands
----------------------------------------------------------------------------------------------------------------------------------------
The puts cmd will print to console
----------------------------------------------------------------------------------------------------------------------------------------
ruby files end in .rb
----------------------------------------------------------------------------------------------------------------------------------------
# is a single line comment
----------------------------------------------------------------------------------------------------------------------------------------
BACKSLASH \ is the escape character but if you dont use it right it will make
some of your code disappear interesting!
----------------------------------------------------------------------------------------------------------------------------------------
You can use single and double qoutes in puts
----------------------------------------------------------------------------------------------------------------------------------------
Sadly multiline comments DO NOT EXIST IN RUBY HUGE BUMMER
----------------------------------------------------------------------------------------------------------------------------------------
== checks if two somethings are equal can be strings and numbers
number == number
----------------------------------------------------------------------------------------------------------------------------------------
ruby uses the classic math operators % is the weird one it divides and
subtract showing what remains
----------------------------------------------------------------------------------------------------------------------------------------
You can reference variables directly in strings like so
puts "There are #{cars} cars available."
----------------------------------------------------------------------------------------------------------------------------------------
When adding numbers within strings make sure that they are actually declared
as a number not a string otherwise they will be concatenated together.
----------------------------------------------------------------------------------------------------------------------------------------
This is probably not important but in case a redundancy like this may come in
handy I will note it. You can put a string in a string using the #{} format
#{'somestring'}
----------------------------------------------------------------------------------------------------------------------------------------
Excercise 8 confused me so I decided to do some research on it. Essentially the
% is used for formatting. This is a better link to how to use it properly:
https://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Literals#The_.25_Notation

Note that the %() sign by itself is used to not have to worry about escaping
single and double qoutes or use them at all. The parenthesis's can be exchanged
to be any alphanumeric character. But the character chosen would then need to be
escaped. Unless its a parenthesis, square bracket or curly braces...
For example %{}

puts %{78% of statistics are "made up" on the spot.normal non escaped braces {}}
So the % character can make it easier to use the same formatting for multiple
items apparently

Thats not all % can do however, There are modifiers that you can place after the
percent sign that allow you to do formatting. Here is a small list but see the
link for more examples:

%q[ ]	Non-interpolated String (except for \\, \[, and \])
%Q[ ]	Interpolated String (default) This one is used for substitution
%r[ ]	Interpolated Regexp (flags can appear after the closing delimiter)
%i[ ]	Non-interpolated Array of symbols, separated by whitespace (after Ruby 2.0)
%I[ ]	Interpolated Array of symbols, separated by whitespace (after Ruby 2.0)
%w[ ]	Non-interpolated Array of words, separated by whitespace
%W[ ]	Interpolated Array of words, separated by whitespace
%x[ ]	Interpolated shell command
%s[ ]	Non-interpolated symbol

A side note but you can use any of these as a multiline string!
OLD
see ex8 for more deets. I dont understand ex 8 enough to be honest so here is
a link explaining more about it but it still went over my head:
http://teohm.com/blog/start-using-ruby-percent-notation/
So I decided to run the examples that are included in the link in ex 8
ACTUALLY I decided to come back after and learn what each does on here
http://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Literals#The_.25_Notation
and here https://en.wikibooks.org/wiki/Ruby_Programming
----------------------------------------------------------------------------------------------------------------------------------------
When using puts There are 3 ways to go to a new line.
First you can just put a blank puts:
puts "one"
puts
puts "two"
THOUGH this would double space stuff which may be nice!
Second you can add commas to the puts and put each item in quotations:
puts "one", "two" ,"three"
Lastly you can print on a new line with the /n command that "command" is
actually called an escape sequence and there are a bunch of them but /n is
really the only cool one. puts "one \n two \n three"
OR puts "one\ntwo\nthree"
----------------------------------------------------------------------------------------------------------------------------------------
LESSON 10 ERROR:
Ok so for some reason I got this output:
/tI'm tabbed in
/t I'm tabbed in are we the same?
I'm split/non a line
I'm \ a \ cat.

I'll do a list:
	* Cat food
	* Fishies
	* Catnip
	* Grass
So Fat cat worked but the others didnt...Without looking at the text i found the
problem:
I was using a forward slash
----------------------------------------------------------------------------------------------------------------------------------------
LIST OF ESCAPE SEQUENCES!!!!!!

\\ Backslash ()
\' Single-quote (’)
\" Double-quote (”)
\a ASCII bell (BEL)
\b ASCII backspace (BS)
\f ASCII formfeed (FF)
\n ASCII linefeed (LF)
\r ASCII Carriage Return (CR)
\t ASCII Horizontal Tab (TAB)
\uxxxx Character with 16-bit hex value xxxx (Unicode only)
\v ASCII vertical tab (VT)
\ooo Character with octal value ooo
\xhh Character with hex value hh
----------------------------------------------------------------------------------------------------------------------------------------
Strings surrounded by single quotes do not support substitution #{} syntax.
----------------------------------------------------------------------------------------------------------------------------------------
gets.chomp will ask input from the user look at what else you can do with get
and why is it called chomp
----------------------------------------------------------------------------------------------------------------------------------------
OK the difference in print and puts. Puts will place every puts on a new line
Prints will not do a new line without specifying it. Just use Puts UNLESS
you are getting user input then use print that makes sense! Other wise their
input would appear on a new line.
EX:

Enter a number:
10

----------------------------------------------------------------------------------------------------------------------------------------
OTHER WAYS TO USE GET:
----------------------------------------------------------------------------------------------------------------------------------------
https://en.wikibooks.org/wiki/Ruby_Programming/Strings
single qoutes versus double???
Well single only allows you 2 escape sequences! \' and \\
AND as mentioned previously single quotes dont support #{} Syntax
THAT WIKI ABOVE IS GOLD use as a reference as you continue
----------------------------------------------------------------------------------------------------------------------------------------
So lesson 11 shows a built in function gets which accepts user input and can be
used with other built in functions namely chomp so gets.chomp

A couple of questions on get are:

What is get and what does it do?
Gets will take data from standard output OR the next output from the terminal
and it will take and put that output and adds a new line so like this: output\n

What does chomp do? It removes the \n from the STDOUT added by get

Is get a built in function? YES its listed here, GOOD JOB for seeking out
knowledge
https://ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/function.html

If get is a function and so is chomp can you compile other functions together
like so gets.chomp? YES you totally can that is very powerful! just add a dot
between them and your golden. Obviously some functions wont play too nice with
each other but it should be rare.
----------------------------------------------------------------------------------------------------------------------------------------
chop will chop the string at the specified number returning only a letter OR
you can specify a range like chop[0..20] the first letter is 0 remember that!
----------------------------------------------------------------------------------------------------------------------------------------
The to_i is offered in a library that comes with ruby but it may not be built in
function but the documentation is PRETTY OLD.
to_i will convert a string to an integer useful for converting user data to a
numerical value

Similarly there is to_s which converts to a string.
----------------------------------------------------------------------------------------------------------------------------------------
EXERCISE 12 LOGICAL ERROR:
I forgot to ask the user to enter a number to let the user now that the script
is waiting on user input. so blank prompt was shown and it looked like it
crashed but it didnt it was just waiting for input.

EXCERCISE 12 ERROR 1:
ex12.rb:19: syntax error, unexpected tIDENTIFIER, expecting end-of-input
10percent= tof * .10
  ^~~~~~~

I was trying to declare a variable that BEGAN with 10 which you cant do but
you can end a variable with a number in ruby percent10

EXCERCISE 12 ERROR 2:
ex12.rb:21: no .<digit> floating literal anymore; put 0 before dot
puts 3.0 + .1

You cant put .1 you HAVE to put the leading zero apparently 0.1
THAT IS A TOUGH ONE!
----------------------------------------------------------------------------------------------------------------------------------------
to_s converts to string
I used it in ex 12 like so:
print "Give me one last number:"
tof = gets.chomp
puts "Lets see what to_f does #{tof}"

percent10 = tof.to_f * 0.10
chopitup = percent10.to_s.chop[0..4]
puts "Here is 10 percent of the last number #{chopitup}"

What I want to remember from this is that you can go from string to number then
back to string AND I want to remember that its all about the order of the
functions its SUPER important you cant chop a float. What I mean by that is:
numberf = 1.22
tostring = numberf.chop[0..4].to_s
The above command will fail as chop is for stings only
tostring = numberf.to_s.chop[0..1]
The above command would work as its converted to a string first
----------------------------------------------------------------------------------------------------------------------------------------
So when writing the script that configures the server you can use the
following code to assign 3 variables to one Argument
----------------------------------------------------------------------------------------------------------------------------------------
PEMDAS! So I thought it was in order but ITS NOT its actually: PE(M&D)(A&S) .
SO parenthesis, Exponents , multiplicateion and DIVISION at the same
time then ADD and subtract at the same time lol didnt know this and
----------------------------------------------------------------------------------------------------------------------------------------
Ruby has a lot of similarities with python, variables are the same, booleans too
just true and false. You can multiply strings like python:
puts "." * 10
----------------------------------------------------------------------------------------------------------------------------------------
ARGV for ruby can be used similarly to python in that you can do:
var1, var2, var3 = ARGV
You can however also do:
variable_name = ARGV.first # This will capture the first user input given to the
script.
----------------------------------------------------------------------------------------------------------------------------------------
In Ruby you can open files just like python. open(filename)
To read a file you just assign that open(filename) to a var and then do var.read
